// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    PAYMENT_L2_ELF, PAYMENT_L2_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use rand::rngs::OsRng;
use ed25519_dalek::SigningKey;
//use ed25519_dalek::Signature;
use ed25519_dalek::{VerifyingKey};
use common::{AccountBook, EngineInput, PaymentTx, TransactionSet};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let mut csprng = OsRng;
    let mut faucet_signing_key: SigningKey = SigningKey::generate(&mut csprng);
    let faucet_verifying_key: VerifyingKey = faucet_signing_key.verifying_key();

    let book = AccountBook::new(faucet_verifying_key, 1000000u128);
    let mut txns = TransactionSet::new();//book.root, 1u32);
    for i in 0u32..3 {
        let alice_signing_key: SigningKey = SigningKey::generate(&mut csprng);
        let alice_verifying_key: VerifyingKey = alice_signing_key.verifying_key();
        txns.add_tx(PaymentTx::new(faucet_verifying_key, alice_verifying_key, 10, i, &mut faucet_signing_key));
    }

    let input = EngineInput{account_book : book, txns : txns, sqn: 0};
    // let input: u32 = 15 * u32::pow(2, 27) + 1;
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover
        .prove(env, PAYMENT_L2_ELF)
        .unwrap();

    // Retrieving receipt journal
    let v: Vec<bool> = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(PAYMENT_L2_ID)
        .unwrap();

    println!("{:?}", v);
}
